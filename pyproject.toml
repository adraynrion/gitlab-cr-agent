[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gitlab-ai-reviewer"
version = "3.3.0"
description = "AI-powered code review automation for GitLab using PydanticAI"
authors = [
    {name = "Adraynrion", email = "adraynrion@pm.me"}
]
readme = "README.md"
license = "LicenseRef-Custom-NonCommercial"
requires-python = ">=3.11"
keywords = ["gitlab", "code-review", "ai", "automation", "pydantic-ai"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Version Control :: Git"
]

dependencies = [
    # Core AI framework
    "pydantic-ai==0.6.2",
    # Web framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "python-multipart>=0.0.6",
    # LLM providers
    "openai>=1.12.0",
    "anthropic>=0.61.0",
    "google-generativeai>=0.3.2",
    # HTTP and GitLab
    "httpx>=0.27.0,<1.0.0",
    "python-gitlab==4.2.0",
    # Configuration and async
    "pydantic-settings>=2.5.2",
    "python-dotenv>=1.0.0",
    "aiofiles==23.2.1",
    # Security and reliability
    "slowapi>=0.1.7",
    "secure>=0.3.0",
    "tenacity>=8.2.0",
    "cryptography>=41.0.0",
    # Monitoring and logging
    "structlog==24.1.0",
    "prometheus-client==0.19.0"
]

[project.optional-dependencies]
test = [
    "pytest==7.4.4",
    "pytest-asyncio==0.23.3",
    "pytest-cov==4.1.0"
]
dev = [
    "black==23.12.1",
    "flake8==7.0.0",
    "mypy==1.8.0",
    "autoflake==2.2.1",
    "isort==5.13.2"
]

[project.urls]
Homepage = "https://github.com/your-org/gitlab-ai-reviewer"
Repository = "https://github.com/your-org/gitlab-ai-reviewer.git"
Issues = "https://github.com/your-org/gitlab-ai-reviewer/issues"
Documentation = "https://github.com/your-org/gitlab-ai-reviewer#readme"

[project.scripts]
gitlab-ai-reviewer = "src.main:main"

[tool.setuptools]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related tests",
    "performance: marks tests as performance-related tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
